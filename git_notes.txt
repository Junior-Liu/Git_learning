Basic functions of git:
# Version Modification and Management
# Remote Repositories Management, Synchronization and clone
# Branches Management
# Labels Management


1 Git codes explaination:

    git add <file>
        > type in the name of the file you want to 
            get into the load of submitting;
        > you can use it for multiple times before 
            you launch your submittion
            - one submittion carries multiple files.
        > add multiple files with one add:
            (e.g.
                $ git add file1.txt file2.txt
                $ git add file3.txt                     )
        > note that git can ONLY understand the files
            and changes in files in TXT types, which 
            means binary files (pictures, videos, 
            Microsoft Words...) are not tractable for
            git. 
        > by the way, DO NOT USE NOTEBOOK in Microsoft 
            system to edit your file!!! 
            - a hexadecimal(0xffffff-like) char at the 
            beginning of each file, which may cause 
            problems.
    
    git commit -m <message>
        > -m for "message": remark for this committing.
            Writing remarks for your committion helps
            both you and others on painful debugging.
            The message SHOULD be put in "".
            (e.g.
                $ git commit -m "wrote a readme file"   )
        > bash will return situation of the files in 
            the repository: 
            (e.g.
                x file changed, y insertations(+)
                create mode n readme.txt                )
            but detailed changes inside the files are 
            absent.
    
    git status
        > check the current state of the branch master 
            in repository, showing what changes not yet
            staged for commit, what changes staged to 
            be committed...
        > if nothing changed and commit load empty, 
            then that implies "working tree clean",
            as stated by bash.
        > guides to continue adding / discard changes
            will be shown as well.
    
    git diff <filename.filetype>
        > if changes (compare with newest version in 
            repository) exist in the working tree, then it 
            will show the detailed changes (b) compared 
            with the last version (a) committed
        > if no change between contiguous commit, then 
            no reply will you derive.
        > q for quit - if the diff reading finished, tap q.
    
    git log (--graph --pretty=oneline --abbrev-commit)
        > bash will output the detailed changes in every
            version you submit the files, with commit id,
            author, date, and changes in the files.
        > remarks of each commit attached.
        > try to use following line to abridge the output:
            (e.g.
                $ git log --pretty=oneline
                #numbers:id_of_commit# (HEAD -> master) remarks
                #numbers:id_of_commit# remarks
                #numbers:id_of_commit# remarks
             ...                                               )
        > the options, if added, will make a graph-like branches figure,
            easier and clearer for understanding
    
    git reset --<hard/soft> <HEAD^/HEAD~n>
        > --hard for resetting to last version committed state
            --soft for resetting to last version uncommitted state
            --mixed for resetting to last version added state
        > HEAD^ for last version (HEAD = current version)
            HEAD^^ for last two version, an so on...
            HEAD~n for last n version, implying the version
            you want to go back
        > after reset to old version, the versions 
            amid the old and new discarded. But, 
            you can still go to those version with 
            just the first few digits of that commit id.
            - ids are usually 40 digits hexadecimal.
            (e.g.
                $ git reset --hard HEAD^
                HEAD is now at <commit_id> remark
                $ git reset --hard 1094a
                HEAD is now at 1094...(<commit_id>) remark  )
    
    git reflog
        > recording every command line you input 
            -> for finding the commit id you want
            use it to find the new version if you want to 
            go back to new version from your retreated one.
    
    git checkout -- <filename.filetype>
        > withdraw (i.e. discard) all the changes of the file 
            <filename.filetype> in the working_directory, 
            with two cases: 
            1` the file haven't been putin stage after changes
                -> after withdraw: same as repository
            2` the file have been putin stage after changes
                -> after withdraw: same as stage version
        > use the version in repository in replace the one in 
            working_directory.
        > "--" is IMOPRTANT!!! Otherwise: switch to other branch
    
    git remote add <remote_repo_alias: origin> git@github.com:Account/repo_name.git
        > IMPORTANT: ##[[relate a remote repo on Github]]##
        > origin: alias of remote repo (self-determined, 
            default origin)
        > remote repo don't have to be same-named as local one.
    
    git remote -v
        > run under local repo directory (uneffective otherwise)
        > return the configuration of current remote repo:
            (e.g.
            $ git remote -v
            origin git@github.com:Account/old-repo.git(fetch)
            origin git@github.com:Account/old-repo.git(push)    )
    
    git remote rm origin
        > remove the existing origin (usually for linking a new one)
        > actually, the so-called "remove" is de-binding the relationship
            between local and remote repo. The remote repo still 
            physically exists and unchanged. To delete the remote:
            delete it on Github website.
    
    git remote set-url <existing_origin> git@github.com:/Account/repo_name.git
        > reset the existing origin to point to new repo url
            (refresh the address of origin)
    
    git push (-u) <remote: origin> <branch_name>
        > push the local files onto the remote repo's selected branch
            (usually default main/master)
        > for the first push, "-u" is needed to bind the branch; 
            ||[Remarks: after that, don't have to add -u            ]
        > Warnings of SSH usually occurs only at the first trial:
            (e.g.
            The authenticity of host 'github.com (xx.xx.xx.xx)' 
                can't be established.
            RSA key fingerprint is xx.xx.xx.xx.xx.
            Are you sure you want to continue connecting (yes/no)?yes
            Warning: Permanently added 'github.com' (RSA) to the list
                of known hosts.                                     )
        > give version from local repo to remote repo
        > [[PUSH STRATEGIES]]
            which branches needed to be pushed?
            ` master: main branches, synchronized at every second
            ` dev: development, every teammate works on it, synchronized
                as well
            ` bug: local debugging, no need
            ` feature: depends on whether co-developing on it
    
    """
    About teamwork - fetching: 
        Same remote repo(master), multi-individual local repo. 
        Most of the time, mates push their own amendments onto 
            master & dev.
        
        A now clone repo to its local:
            $ git clone git@github.com:Account/repo.git
        By default, A can only see local master branch.
        To develop with dev, A must create origin/dev to local:
            $ git checkout -b dev origin/dev
           ($ git checkout -b <branch_name> <remote/branch_name>    )
        Now A can amend on dev and push to remote time by time
            $ git add env.py
            $ git commit -m "add env"
            $ git push origin dev
           ($ git push <remote/branch_name> <branch_name>           )

        A has push amendment to origin/dev, while B also amend the same
            file env.py, and try to push:
            $ cat env.py
            <content of env.py>
            $ git add env.py
            $ git commit -m "add new env"
            $ git push origin dev
            [ERROR: ......]
        Push failed: CONFLICT with A's last push.
        Sol.: use "git pull" to fetch the new upload from origin/dev, 
            merge them (B's and A's) locally, then push again: 
            $ git pull
           ($ git pull <remote/branch_name> <branch_name>)
        Failed again: have yet set link between local dev and origin/dev,
            so need to set link between branches:
            $ git branch --set-upstream-to=origin/dev dev
           ($ git branch --set-upstream-to=<remote/branch_name> <branch_name>)
        Then pull:
            $ git pull
        And merge the two amendment with conflicts:
        After mergence, commit, then push:
            $ git commit -m "fix env conflict"
            $ git push origin dev
        Success.

    For short:
        ` Use "git remote -v" check detailed info of remote;
        ` New local branches, if not pushed, is invisible to others;
        ` Use "git push <remote/branch_name> <branch_name>" to push,
            if failed: use "git pull" to fetch new amend first;
        ` Use "git checkkout -b <branch_name> <remote/branch_name>"
            to create branch coresponding to remote branch;
        ` Use "git branch --set-upstream-to=<remote/branch_name> <branch_name>"
            to build link between local branch and remote one;
        ` Use "git pull" to fetch branch. Solve conflict first if exists.
    """
    
    git pull <repo: origin> <branch: main> (--allow-unrelated-histories)
        > pull the content(files) on the remote repo before pushing 
            contents onto remote repo (avoid conflict of files)
        > some repo will call its origin as "skeleton", which is the 
            most important part.
        > get version from remote repo to local repo
    
    git clone git@github.com:Account/repo_name.git <local_path>
        > clone a repo to local selected path from remote
        > usual output:
            (e.g.
            Cloning into 'gitskills'...
            remote: Counting objects: 3, done.
            remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3
            Receiving objects: 100% (3/3), done.                    )
        > if the local path contains any special char, quote the WHOLE 
            local path with ""

    git restore (--source=[commitID])
        > restore files to the versions in the most recent commit
            (recovery to the latest commit version)
        > restore to the specific version (represent by commitID)
        > get the version in local repo to working directory

    git rm <filename.filetype>
        > remove manually first then use this code is equivalent
            to git add <filename.filetype>
        > use git commit -m "remove <filename.filetype>" to 
            remove the file sent in repository
        > if a file had been sent to repository, never worring
            mis-deleting. 
        > but CAUTION! Last change will discard. Only newest 
            version resumable.

    git checkout -b der
        > equivalent to the following two lines:
            (e.g.
            $ git branch dev
            $ git checkout dev
            Switched to branch 'dev'                    )
        > use for creating and switching branches

    git branch
        > listing out all the branches with * at the front of the current
        > if <new_branch_name> added behind: create a new branch
            otherwise: check existing branches
        > deleting branches: 
            (e.g.
                $ git branch -d <branch_name>                       )
            ||[Remarks: branch information losses               ]
            ||[Remarks: to discard an unmerged branch:
                $ git branch -D <branch_name>                   ]
        > before cerating a new branch (for fixxing a current bug),
            while the work unfinished yet (thus cannot commit yet)
            use: git stash to temp reserve the content

    git checkout <branch_name>
        > switch between branches
    
    git switch -c <branch_name>
        > switch between branches (for new version of Git Bash)
    
    git merge <merge_strategy> (-m "message") <other_branch_name>
        > merge the yield of other branch to current branch
            (e.g.
            (just finishing working on dev, now switch to master,
                all the new yield becomes inversible now...)
            $ git merge dev
            Updating d46f35e..b17d20e
            Fast-forward
             readme.txt | 1 +
            1 file changed, 1 insertion(+)
            (now the yields are merged to master 
            - master pointer moved ahead)                       )
            ||[Remarks: here the fast-forward means moving master
                pointer to the dev current commit. There also exists
                other types of mergences.                       ]
        > [[Merging Branches (ff):]]
            when conflict occurs: editor will label out contents 
                from different branches. Just edit it till you 
                satisfy, then save it, add and commit.
            conflict defused!
            now master branch synchronized to dev branch
            cover the dev branch information
            usually delete unused branches (dev) by the way
        > [[merge with --no-ff (NOT fast-forward):]]
            reserve the branches information (the merged version
                will NOT cover the dev last version)
            (e.g.
                $ git switch master
                $ git merge --no-ff -m "merge with no ff" dev
                ...                                             )
        > [[Mergence Strategies:]]
            usually: 
                master:     most steady, release new version only
                dev:        use for working (unsteady)
                    (everyone works on dev and has their own branches,
                    and merge their work onto dev from time to time)
                feature:    develop a new feature/function (exxperimental)
                    (if the feature branch eventually decided to be
                    discard, discard it with -D (brute discarding))

        > REMEMBER TO COMMIT YOUR DEBUG FOR MERGING
    
    git stash
        > temp reserve the content
        > working tree of current branch will be clean
            (use "git status" to check it)
    
    git stash list
        > check the content stash in the stash
        > nothing can be seen after drop & pop
    
    git stash apply (stash@{i})
        > recover the working content
        > recover the appointed stash
        > DO NOT delete content in stash after recovering
    
    git stash drop
        > discard the content stocked in stash (DO NOT affect those 
            recovered in the working place, only for those in stash)

    git stash pop
        > DO delete content in stash after recovering
    
    git cherry-pick <commit-id>
        > pick the debug-commit and copy to current branch
            (e.g.
            (you've debug on master branch, now want to merge to dev, 
                use git cherry-pick:)
            $ git cherry-pick <commit-id>
            [master <commit-id>] "message of the debug commit"
             1 file changed, 1 insertation(+), 1 deletion(-)    )

    rm <filename.filetype>
        > remove the selected file in stage 
            (equivalent to remove explicitly in laptop folder)
    
    cd <path>
        > switch your path/directory to the selected 
            path/directory
    
    ls -al <filename>
        > read the file
        > simply "ls" can also show the existing files in the current 
            directory
    
    mkdir <directory_name>
        > create a new directory
        > add "-p" at the middle: create the parent folder if
            it does not exist
            (e.g.
                mkdir -p <directory_name>               )
    
    cp <filename>  ?



2 Git architecture:
    working directory (gong1 zuo4 qu1): 
        the file which has the .git (hidden) file
        visible in laptop interface
        .git not part of working directory, but hidden 
        in that folder.
    
    repository (ban2 ben3 ku4):
        the .git file
        containing many stuffs, including stage (i.e. index,
        zan3 cun2 qu1), the first branch master, pointer HEAD
        pointing to master.
        
        diagram representation:
        __working_directory__    __repository____________________
        |  folder           |    |  __stage__  HEAD->__master_  |
        |  |-file -----------add--->| folder |       | folder  ||
        |  |-file           |    |  | |-file--commit-->|-file  ||
        |  |-file           |    |  | |-file |       | |-file  ||
        |  |-folder         |    |  | |-file |       | |-file  ||
        |     |-file        |    |  |        |       | |-folder||
        |     |-file        |    |  |        |       |   |-file||
        |                   |    |   \______/        |   |-file||
         \_________________/      \___________________\_______//
    
    stage (zan3 cun2 qu1):
        files changes to be submitted will all be put in stage;
        changes in stage submitted at once.
        Basically, "$ git status" is for check status of stage.
        Once committed, stage is clean.


